// <auto-generated />
using System;
using Bookstore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bookstore.Migrations
{
    [DbContext(typeof(BookstoreDbContext))]
    [Migration("20250415213239_initDb")]
    partial class initDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Bookstore.Models.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "69f5da12-00d6-4b8d-b5e5-00f321406176",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "9f111b1f-d146-4893-a567-43dafa100620",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Bookstore.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fb866109-0cb7-4d3b-8f5a-dbafb2640153",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            Gender = 0,
                            LockoutEnabled = false,
                            Name = "Super",
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEPaJdmhbv1gFnBzqyRsQTfOKrSRVnEcduzr1p3O8sHkZIDzwUU0DzezNncblQAQK5g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3fddae33-8b57-49eb-b229-fc23408b35d4",
                            Surname = "Admin",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("Bookstore.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<short?>("BirthYear")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthYear = (short)1990,
                            FullName = "Matt Haig"
                        },
                        new
                        {
                            Id = 2,
                            BirthYear = (short)1903,
                            FullName = "George Orwell"
                        },
                        new
                        {
                            Id = 3,
                            BirthYear = (short)1775,
                            FullName = "Jane Austen"
                        },
                        new
                        {
                            Id = 4,
                            BirthYear = (short)1947,
                            FullName = "Stephen King"
                        },
                        new
                        {
                            Id = 5,
                            BirthYear = (short)1965,
                            FullName = "J.K. Rowling"
                        },
                        new
                        {
                            Id = 6,
                            BirthYear = (short)1890,
                            FullName = "Agatha Christie"
                        },
                        new
                        {
                            Id = 7,
                            BirthYear = (short)1828,
                            FullName = "Leo Tolstoy"
                        },
                        new
                        {
                            Id = 8,
                            BirthYear = (short)1899,
                            FullName = "Ernest Hemingway"
                        },
                        new
                        {
                            Id = 9,
                            BirthYear = (short)1949,
                            FullName = "Haruki Murakami"
                        },
                        new
                        {
                            Id = 10,
                            BirthYear = (short)1927,
                            FullName = "Gabriel Garcia Marquez"
                        });
                });

            modelBuilder.Entity("Bookstore.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CoverImage")
                        .HasMaxLength(256)
                        .HasColumnType("varchar");

                    b.Property<string>("CoverText")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EditionNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<short>("PublicationYear")
                        .HasColumnType("smallint");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("UserId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 8,
                            CoverImage = "",
                            CoverText = "Hayatın olasılıkları üzerine etkileyici bir hikaye.",
                            EditionNumber = 1,
                            Price = 120m,
                            PublicationYear = (short)2020,
                            PublisherId = 1,
                            Title = "Gece Yarısı Kütüphanesi",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CoverImage = "",
                            CoverText = "Distopik bir geleceğin sert tasviri.",
                            EditionNumber = 5,
                            Price = 90m,
                            PublicationYear = (short)1949,
                            PublisherId = 2,
                            Title = "1984",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 6,
                            CoverImage = "",
                            CoverText = "Zarafet ve sınıf çatışmalarının romanı.",
                            EditionNumber = 3,
                            Price = 85m,
                            PublicationYear = (short)1813,
                            PublisherId = 3,
                            Title = "Aşk ve Gurur",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            CoverImage = "",
                            CoverText = "Korku dolu bir kasaba ve geçmişin karanlığı.",
                            EditionNumber = 2,
                            Price = 110m,
                            PublicationYear = (short)1986,
                            PublisherId = 4,
                            Title = "O",
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 7,
                            CoverImage = "",
                            CoverText = "Büyücü bir çocuğun destansı yolculuğu.",
                            EditionNumber = 1,
                            Price = 100m,
                            PublicationYear = (short)1997,
                            PublisherId = 5,
                            Title = "Harry Potter ve Felsefe Taşı",
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 5,
                            CoverImage = "",
                            CoverText = "Gerilim ve gizemin en iyi örneklerinden.",
                            EditionNumber = 4,
                            Price = 95m,
                            PublicationYear = (short)1939,
                            PublisherId = 6,
                            Title = "On Küçük Zenci",
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 9,
                            CoverImage = "",
                            CoverText = "Rusya'nın tarihsel ve kültürel panoraması.",
                            EditionNumber = 2,
                            Price = 130m,
                            PublicationYear = (short)1869,
                            PublisherId = 7,
                            Title = "Savaş ve Barış",
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            CoverImage = "",
                            CoverText = "Direnişin ve yalnızlığın metaforu.",
                            EditionNumber = 2,
                            Price = 80m,
                            PublicationYear = (short)1952,
                            PublisherId = 8,
                            Title = "Yaşlı Adam ve Deniz",
                            UserId = 1
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            CoverImage = "",
                            CoverText = "Paralel evrende geçen gizemli bir yolculuk.",
                            EditionNumber = 1,
                            Price = 125m,
                            PublicationYear = (short)2009,
                            PublisherId = 9,
                            Title = "1Q84",
                            UserId = 1
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 10,
                            CoverImage = "",
                            CoverText = "Bir ailenin kuşaklar arası büyülü hikayesi.",
                            EditionNumber = 3,
                            Price = 115m,
                            PublicationYear = (short)1967,
                            PublisherId = 10,
                            Title = "Yüzyıllık Yalnızlık",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Bookstore.Models.BookAuthor", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookAuthors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            BookId = 1
                        },
                        new
                        {
                            AuthorId = 2,
                            BookId = 2
                        },
                        new
                        {
                            AuthorId = 3,
                            BookId = 3
                        },
                        new
                        {
                            AuthorId = 4,
                            BookId = 4
                        },
                        new
                        {
                            AuthorId = 5,
                            BookId = 5
                        },
                        new
                        {
                            AuthorId = 6,
                            BookId = 6
                        },
                        new
                        {
                            AuthorId = 7,
                            BookId = 7
                        },
                        new
                        {
                            AuthorId = 8,
                            BookId = 8
                        },
                        new
                        {
                            AuthorId = 9,
                            BookId = 9
                        },
                        new
                        {
                            AuthorId = 10,
                            BookId = 10
                        });
                });

            modelBuilder.Entity("Bookstore.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("KitapId")
                        .HasColumnType("int");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Bookstore.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Roman"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Bilim Kurgu"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Korku"
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Felsefe"
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Polisiye"
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "Klasik"
                        },
                        new
                        {
                            Id = 7,
                            CategoryName = "Fantastik"
                        },
                        new
                        {
                            Id = 8,
                            CategoryName = "Modern Edebiyat"
                        },
                        new
                        {
                            Id = 9,
                            CategoryName = "Tarih"
                        },
                        new
                        {
                            Id = 10,
                            CategoryName = "Latin Amerika Edebiyatı"
                        });
                });

            modelBuilder.Entity("Bookstore.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PublisherName = "Pegasus Yayınları"
                        },
                        new
                        {
                            Id = 2,
                            PublisherName = "Can Yayınları"
                        },
                        new
                        {
                            Id = 3,
                            PublisherName = "İş Bankası Kültür Yayınları"
                        },
                        new
                        {
                            Id = 4,
                            PublisherName = "Altın Kitaplar"
                        },
                        new
                        {
                            Id = 5,
                            PublisherName = "YKY"
                        },
                        new
                        {
                            Id = 6,
                            PublisherName = "Epsilon Yayınları"
                        },
                        new
                        {
                            Id = 7,
                            PublisherName = "Remzi Kitabevi"
                        },
                        new
                        {
                            Id = 8,
                            PublisherName = "Everest Yayınları"
                        },
                        new
                        {
                            Id = 9,
                            PublisherName = "Doğan Kitap"
                        },
                        new
                        {
                            Id = 10,
                            PublisherName = "Kafka Kitap"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Bookstore.Models.Book", b =>
                {
                    b.HasOne("Bookstore.Models.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookstore.Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookstore.Models.AppUser", "User")
                        .WithMany("Books")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Publisher");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bookstore.Models.BookAuthor", b =>
                {
                    b.HasOne("Bookstore.Models.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookstore.Models.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Bookstore.Models.Cart", b =>
                {
                    b.HasOne("Bookstore.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId");

                    b.HasOne("Bookstore.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Bookstore.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Bookstore.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Bookstore.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Bookstore.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookstore.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Bookstore.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bookstore.Models.AppUser", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Bookstore.Models.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("Bookstore.Models.Book", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("Bookstore.Models.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Bookstore.Models.Publisher", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
