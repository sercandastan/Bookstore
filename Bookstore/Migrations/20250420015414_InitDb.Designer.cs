// <auto-generated />
using System;
using Bookstore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bookstore.Migrations
{
    [DbContext(typeof(BookstoreDbContext))]
    [Migration("20250420015414_InitDb")]
    partial class InitDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Bookstore.Models.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "1e45e12d-3247-47f7-88bb-6a8f18df73b1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "cd15ffa4-fb0f-48ec-8151-2e65aad0683b",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Bookstore.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3367000c-e282-471c-a01d-256fdafcc155",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            Gender = 0,
                            LockoutEnabled = false,
                            Name = "Super",
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEGcFxZ2aluQvRBT0WkT4u0gXZBqTxYlATu+AnQXmQBvY2bi9JGJzUKewqf2vsfmDbA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "09b70f20-1b87-47fa-b617-b48989e8c4d2",
                            Surname = "Admin",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b2fb76d9-60c6-4e5d-b3ef-b7736789f689",
                            Email = "sercandastan@hotmail.com",
                            EmailConfirmed = false,
                            Gender = 0,
                            LockoutEnabled = false,
                            Name = "Sercan",
                            NormalizedEmail = "SERCANDASTAN@HOTMAIL.COM",
                            NormalizedUserName = "SERCANDASTAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEKisYljlzbeeh7M+x/8J0KFxxjxSu6scaoQ2mCiaMX2jVEbYdKH6mAEmZuZW8dRddQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e9e259e7-6028-47e9-9adf-ab33e670175c",
                            Surname = "Daştan",
                            TwoFactorEnabled = false,
                            UserName = "sercandastan"
                        });
                });

            modelBuilder.Entity("Bookstore.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<short?>("BirthYear")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthYear = (short)1990,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(691),
                            FullName = "Matt Haig",
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            BirthYear = (short)1903,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(708),
                            FullName = "George Orwell",
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            BirthYear = (short)1775,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(710),
                            FullName = "Jane Austen",
                            Status = 0
                        },
                        new
                        {
                            Id = 4,
                            BirthYear = (short)1947,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(711),
                            FullName = "Stephen King",
                            Status = 0
                        },
                        new
                        {
                            Id = 5,
                            BirthYear = (short)1965,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(712),
                            FullName = "J.K. Rowling",
                            Status = 0
                        },
                        new
                        {
                            Id = 6,
                            BirthYear = (short)1890,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(713),
                            FullName = "Agatha Christie",
                            Status = 0
                        },
                        new
                        {
                            Id = 7,
                            BirthYear = (short)1828,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(714),
                            FullName = "Leo Tolstoy",
                            Status = 0
                        },
                        new
                        {
                            Id = 8,
                            BirthYear = (short)1899,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(715),
                            FullName = "Ernest Hemingway",
                            Status = 0
                        },
                        new
                        {
                            Id = 9,
                            BirthYear = (short)1949,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(716),
                            FullName = "Haruki Murakami",
                            Status = 0
                        },
                        new
                        {
                            Id = 10,
                            BirthYear = (short)1927,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(717),
                            FullName = "Gabriel Garcia Marquez",
                            Status = 0
                        },
                        new
                        {
                            Id = 11,
                            BirthYear = (short)1952,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(719),
                            FullName = "Orhan Pamuk",
                            Status = 0
                        },
                        new
                        {
                            Id = 12,
                            BirthYear = (short)1971,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(720),
                            FullName = "Elif Şafak",
                            Status = 0
                        },
                        new
                        {
                            Id = 13,
                            BirthYear = (short)1821,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(721),
                            FullName = "Fyodor Dostoevsky",
                            Status = 0
                        },
                        new
                        {
                            Id = 14,
                            BirthYear = (short)1871,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(722),
                            FullName = "Marcel Proust",
                            Status = 0
                        },
                        new
                        {
                            Id = 15,
                            BirthYear = (short)1882,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(723),
                            FullName = "Virginia Woolf",
                            Status = 0
                        },
                        new
                        {
                            Id = 16,
                            BirthYear = (short)1877,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(724),
                            FullName = "Hermann Hesse",
                            Status = 0
                        },
                        new
                        {
                            Id = 17,
                            BirthYear = (short)1835,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(725),
                            FullName = "Mark Twain",
                            Status = 0
                        },
                        new
                        {
                            Id = 18,
                            BirthYear = (short)1883,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(726),
                            FullName = "Franz Kafka",
                            Status = 0
                        },
                        new
                        {
                            Id = 19,
                            BirthYear = (short)1947,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(727),
                            FullName = "Paulo Coelho",
                            Status = 0
                        },
                        new
                        {
                            Id = 20,
                            BirthYear = (short)1964,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(810),
                            FullName = "Dan Brown",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Bookstore.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CoverImage")
                        .HasMaxLength(256)
                        .HasColumnType("varchar");

                    b.Property<string>("CoverText")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EditionNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<short>("PublicationYear")
                        .HasColumnType("smallint");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("UserId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 8,
                            CoverImage = "/BookCoverImages/gyk.jpg",
                            CoverText = "Hayatın olasılıkları üzerine etkileyici bir hikaye.",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(2105),
                            EditionNumber = 1,
                            Price = 120m,
                            PublicationYear = (short)2020,
                            PublisherId = 1,
                            Status = 0,
                            Title = "Gece Yarısı Kütüphanesi",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CoverImage = "/BookCoverImages/1984.jpg",
                            CoverText = "Distopik bir geleceğin sert tasviri.",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(2109),
                            EditionNumber = 5,
                            Price = 90m,
                            PublicationYear = (short)1949,
                            PublisherId = 2,
                            Status = 0,
                            Title = "1984",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 6,
                            CoverImage = "/BookCoverImages/avg.jpg",
                            CoverText = "Zarafet ve sınıf çatışmalarının romanı.",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(2110),
                            EditionNumber = 3,
                            Price = 85m,
                            PublicationYear = (short)1813,
                            PublisherId = 3,
                            Status = 0,
                            Title = "Aşk ve Gurur",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            CoverImage = "/BookCoverImages/O.jpg",
                            CoverText = "Korku dolu bir kasaba ve geçmişin karanlığı.",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(2112),
                            EditionNumber = 2,
                            Price = 110m,
                            PublicationYear = (short)1986,
                            PublisherId = 4,
                            Status = 0,
                            Title = "O",
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 7,
                            CoverImage = "/BookCoverImages/hpvft.jpg",
                            CoverText = "Büyücü bir çocuğun destansı yolculuğu.",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(2113),
                            EditionNumber = 1,
                            Price = 100m,
                            PublicationYear = (short)1997,
                            PublisherId = 5,
                            Status = 0,
                            Title = "Harry Potter ve Felsefe Taşı",
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 5,
                            CoverImage = "/BookCoverImages/okz.jpg",
                            CoverText = "Gerilim ve gizemin en iyi örneklerinden.",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(2115),
                            EditionNumber = 4,
                            Price = 95m,
                            PublicationYear = (short)1939,
                            PublisherId = 6,
                            Status = 0,
                            Title = "On Küçük Zenci",
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 9,
                            CoverImage = "/BookCoverImages/svb.jpg",
                            CoverText = "Rusya'nın tarihsel ve kültürel panoraması.",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(2116),
                            EditionNumber = 2,
                            Price = 130m,
                            PublicationYear = (short)1869,
                            PublisherId = 7,
                            Status = 0,
                            Title = "Savaş ve Barış",
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            CoverImage = "/BookCoverImages/yavd.jpg",
                            CoverText = "Direnişin ve yalnızlığın metaforu.",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(2118),
                            EditionNumber = 2,
                            Price = 80m,
                            PublicationYear = (short)1952,
                            PublisherId = 8,
                            Status = 0,
                            Title = "Yaşlı Adam ve Deniz",
                            UserId = 1
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            CoverImage = "/BookCoverImages/1q84.jpg",
                            CoverText = "Paralel evrende geçen gizemli bir yolculuk.",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(2119),
                            EditionNumber = 1,
                            Price = 125m,
                            PublicationYear = (short)2009,
                            PublisherId = 9,
                            Status = 0,
                            Title = "1Q84",
                            UserId = 1
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 10,
                            CoverImage = "/BookCoverImages/yy.jpg",
                            CoverText = "Bir ailenin kuşaklar arası büyülü hikayesi.",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(2121),
                            EditionNumber = 3,
                            Price = 115m,
                            PublicationYear = (short)1967,
                            PublisherId = 10,
                            Status = 0,
                            Title = "Yüzyıllık Yalnızlık",
                            UserId = 1
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            CoverImage = "/BookCoverImages/korluk.jpg",
                            CoverText = "Toplumsal çöküşün karanlık portresi.",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(2122),
                            EditionNumber = 2,
                            Price = 105m,
                            PublicationYear = (short)1995,
                            PublisherId = 11,
                            Status = 0,
                            Title = "Körlük",
                            UserId = 1
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 10,
                            CoverImage = "/BookCoverImages/masumiyet.jpg",
                            CoverText = "Takıntı ile aşkın sınırlarında bir hikaye.",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(2124),
                            EditionNumber = 1,
                            Price = 95m,
                            PublicationYear = (short)2008,
                            PublisherId = 12,
                            Status = 0,
                            Title = "Masumiyet Müzesi",
                            UserId = 1
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 6,
                            CoverImage = "/BookCoverImages/scuzceza.jpg",
                            CoverText = "Vicdan azabının psikolojik çözümlemesi.",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(2125),
                            EditionNumber = 3,
                            Price = 110m,
                            PublicationYear = (short)1866,
                            PublisherId = 13,
                            Status = 0,
                            Title = "Suç ve Ceza",
                            UserId = 1
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 8,
                            CoverImage = "/BookCoverImages/kayipzaman.jpg",
                            CoverText = "Belleğin ince notaları.",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(2127),
                            EditionNumber = 1,
                            Price = 150m,
                            PublicationYear = (short)1913,
                            PublisherId = 14,
                            Status = 0,
                            Title = "Kayıp Zamanın İzinde",
                            UserId = 1
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 4,
                            CoverImage = "/BookCoverImages/mrsdalloway.jpg",
                            CoverText = "Bir günün özenle işlenmiş portresi.",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(2128),
                            EditionNumber = 2,
                            Price = 90m,
                            PublicationYear = (short)1925,
                            PublisherId = 15,
                            Status = 0,
                            Title = "Mrs Dalloway",
                            UserId = 1
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 4,
                            CoverImage = "/BookCoverImages/siddhartha.jpg",
                            CoverText = "Ruhani yolculuğa dair bir başyapıt.",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(2130),
                            EditionNumber = 1,
                            Price = 85m,
                            PublicationYear = (short)1922,
                            PublisherId = 16,
                            Status = 0,
                            Title = "Siddhartha",
                            UserId = 1
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 1,
                            CoverImage = "/BookCoverImages/tomsawyer.jpg",
                            CoverText = "Çocukluğun neşeli dünyası.",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(2131),
                            EditionNumber = 5,
                            Price = 75m,
                            PublicationYear = (short)1876,
                            PublisherId = 17,
                            Status = 0,
                            Title = "Tom Sawyer’ın Maceraları",
                            UserId = 1
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 3,
                            CoverImage = "/BookCoverImages/donusum.jpg",
                            CoverText = "Varoluşsal kaygının sembolik öyküsü.",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(2133),
                            EditionNumber = 1,
                            Price = 80m,
                            PublicationYear = (short)1915,
                            PublisherId = 18,
                            Status = 0,
                            Title = "Dönüşüm",
                            UserId = 1
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 7,
                            CoverImage = "/BookCoverImages/simyaci.jpg",
                            CoverText = "Rüyanın peşinde bir yolculuk.",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(2134),
                            EditionNumber = 3,
                            Price = 95m,
                            PublicationYear = (short)1988,
                            PublisherId = 19,
                            Status = 0,
                            Title = "Simyacı",
                            UserId = 1
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 2,
                            CoverImage = "/BookCoverImages/davinci.jpg",
                            CoverText = "Tarih, sanat ve gizemin kesiştiği nokta.",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 583, DateTimeKind.Local).AddTicks(2135),
                            EditionNumber = 2,
                            Price = 120m,
                            PublicationYear = (short)2003,
                            PublisherId = 20,
                            Status = 0,
                            Title = "Da Vinci Şifresi",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Bookstore.Models.BookAuthor", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookAuthors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            BookId = 1
                        },
                        new
                        {
                            AuthorId = 2,
                            BookId = 2
                        },
                        new
                        {
                            AuthorId = 3,
                            BookId = 3
                        },
                        new
                        {
                            AuthorId = 4,
                            BookId = 4
                        },
                        new
                        {
                            AuthorId = 5,
                            BookId = 5
                        },
                        new
                        {
                            AuthorId = 6,
                            BookId = 6
                        },
                        new
                        {
                            AuthorId = 7,
                            BookId = 7
                        },
                        new
                        {
                            AuthorId = 8,
                            BookId = 8
                        },
                        new
                        {
                            AuthorId = 9,
                            BookId = 9
                        },
                        new
                        {
                            AuthorId = 10,
                            BookId = 10
                        },
                        new
                        {
                            AuthorId = 11,
                            BookId = 11
                        },
                        new
                        {
                            AuthorId = 12,
                            BookId = 12
                        },
                        new
                        {
                            AuthorId = 13,
                            BookId = 13
                        },
                        new
                        {
                            AuthorId = 14,
                            BookId = 14
                        },
                        new
                        {
                            AuthorId = 15,
                            BookId = 15
                        },
                        new
                        {
                            AuthorId = 16,
                            BookId = 16
                        },
                        new
                        {
                            AuthorId = 17,
                            BookId = 17
                        },
                        new
                        {
                            AuthorId = 18,
                            BookId = 18
                        },
                        new
                        {
                            AuthorId = 19,
                            BookId = 19
                        },
                        new
                        {
                            AuthorId = 20,
                            BookId = 20
                        });
                });

            modelBuilder.Entity("Bookstore.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("KitapId")
                        .HasColumnType("int");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Bookstore.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Roman",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(640),
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Bilim Kurgu",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(646),
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Korku",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(647),
                            Status = 0
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Felsefe",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(648),
                            Status = 0
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Polisiye",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(649),
                            Status = 0
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "Klasik",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(650),
                            Status = 0
                        },
                        new
                        {
                            Id = 7,
                            CategoryName = "Fantastik",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(650),
                            Status = 0
                        },
                        new
                        {
                            Id = 8,
                            CategoryName = "Modern Edebiyat",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(651),
                            Status = 0
                        },
                        new
                        {
                            Id = 9,
                            CategoryName = "Tarih",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(652),
                            Status = 0
                        },
                        new
                        {
                            Id = 10,
                            CategoryName = "Latin Amerika Edebiyatı",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(653),
                            Status = 0
                        },
                        new
                        {
                            Id = 11,
                            CategoryName = "Çocuk",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(654),
                            Status = 0
                        },
                        new
                        {
                            Id = 12,
                            CategoryName = "Psikoloji",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(655),
                            Status = 0
                        },
                        new
                        {
                            Id = 13,
                            CategoryName = "Kişisel Gelişim",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(656),
                            Status = 0
                        },
                        new
                        {
                            Id = 14,
                            CategoryName = "Biyografi",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(657),
                            Status = 0
                        },
                        new
                        {
                            Id = 15,
                            CategoryName = "Gezi",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(658),
                            Status = 0
                        },
                        new
                        {
                            Id = 16,
                            CategoryName = "Sağlık",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(659),
                            Status = 0
                        },
                        new
                        {
                            Id = 17,
                            CategoryName = "Ekonomi",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(660),
                            Status = 0
                        },
                        new
                        {
                            Id = 18,
                            CategoryName = "Sanat",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(660),
                            Status = 0
                        },
                        new
                        {
                            Id = 19,
                            CategoryName = "Şiir",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(661),
                            Status = 0
                        },
                        new
                        {
                            Id = 20,
                            CategoryName = "Çağdaş Dünya Edebiyatı",
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(662),
                            Status = 0
                        });
                });

            modelBuilder.Entity("Bookstore.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(1501),
                            PublisherName = "Pegasus Yayınları",
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(1503),
                            PublisherName = "Can Yayınları",
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(1504),
                            PublisherName = "İş Bankası Kültür Yayınları",
                            Status = 0
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(1505),
                            PublisherName = "Altın Kitaplar",
                            Status = 0
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(1506),
                            PublisherName = "YKY",
                            Status = 0
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(1507),
                            PublisherName = "Epsilon Yayınları",
                            Status = 0
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(1508),
                            PublisherName = "Remzi Kitabevi",
                            Status = 0
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(1509),
                            PublisherName = "Everest Yayınları",
                            Status = 0
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(1510),
                            PublisherName = "Doğan Kitap",
                            Status = 0
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(1511),
                            PublisherName = "Kafka Kitap",
                            Status = 0
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(1512),
                            PublisherName = "Metis Yayınları",
                            Status = 0
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(1513),
                            PublisherName = "İthaki Yayınları",
                            Status = 0
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(1514),
                            PublisherName = "Doğan Egmont",
                            Status = 0
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(1515),
                            PublisherName = "Tudem Yayınları",
                            Status = 0
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(1516),
                            PublisherName = "Türkiye İş Bankası Kültür Yayınları",
                            Status = 0
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(1516),
                            PublisherName = "Omega Yayınları",
                            Status = 0
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(1517),
                            PublisherName = "Kalem Kitap",
                            Status = 0
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(1518),
                            PublisherName = "Beyaz Balina Yayınları",
                            Status = 0
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(1519),
                            PublisherName = "Profil Yayıncılık",
                            Status = 0
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2025, 4, 20, 4, 54, 14, 584, DateTimeKind.Local).AddTicks(1520),
                            PublisherName = "Dergah Yayınları",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Bookstore.Models.Book", b =>
                {
                    b.HasOne("Bookstore.Models.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookstore.Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookstore.Models.AppUser", "User")
                        .WithMany("Books")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Publisher");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bookstore.Models.BookAuthor", b =>
                {
                    b.HasOne("Bookstore.Models.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookstore.Models.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Bookstore.Models.Cart", b =>
                {
                    b.HasOne("Bookstore.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId");

                    b.HasOne("Bookstore.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Bookstore.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Bookstore.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Bookstore.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Bookstore.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookstore.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Bookstore.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bookstore.Models.AppUser", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Bookstore.Models.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("Bookstore.Models.Book", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("Bookstore.Models.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Bookstore.Models.Publisher", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
